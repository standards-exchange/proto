syntax = "proto3";

package standards.open.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/date.proto";
import "google/type/month.proto";
import "standards/open/v1/metric.proto";
import "standards/open/v1/rag.proto";

option go_package = "github.com/standards-exchange/protobuf-go/standards/open/v1";


// Fund Accounting Monthly KPI & MI Report for governance oversight and reporting for UCITS funds
message RT000FTL8 {
//    // Definition of an overview message
//    message Overview {
//        // The reporting year
//        int32 reporting_year = 101;
//        // The reporting month
//        google.type.Month reporting_month = 102;
//        // The date data was produced (YYYY-MM-DD)
//        string production_date = 3;
//        // The date of the latest nav valuation (YYYY-MM-DD)
//        string latest_nav_valuation_date = 4;
//        // The legal identifier of the umbrella
//        // Should conform to: https://openfunds.org/OFST005010 (Umbrella)
//        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
//        string umbrella_fund = 5;
//        // Names of the relevant sub-funds
//        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
//        // Refers to the Sub-Fund in the case of an umbrella structure
//        // or Fund in the case of a standalone structure
//        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
//        repeated string funds = 6;
//        // Aggregation entity
//        // The name of the entity at which metrics should be aggregated for downstream reporting purposes
//        string aggregation_entity = 7;
//    }
//    // Overview of the Fund Accounting Monthly KPI & MI Report
//    Overview overview = 2;
    // Definition of a monthly metric
    message MonthlyRAGMetric {
        // The year of the metric
        int32 year = 1;
        // The month of the metric
        int32 month = 2;
        // The date metric was produced (YYYY-MM-DD)
        string production_date = 3;
        // The legal identifier of the umbrella
        // Should conform to: https://openfunds.org/OFST005010 (Umbrella)
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string umbrella_fund = 4;
        // Names of the relevant sub-fund (if applicable)
        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
        // Refers to the Sub-Fund in the case of an umbrella structure
        // or Fund in the case of a standalone structure
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string fund = 5;
        // The common identifier of the subject.
        // In most instances the subject (i.e the entity being measured by the metric) should be the umbrella for which the report is provided.
        // Metrics related to specific sub-funds, however, can be reported alongside the aggregated values
        // so long as the this is consistently applied
        string subject_id = 6;
        // The human readable name of the subject of the metric
        string subject_name = 7;
        // Enumeration of metricIDs
        enum MetricID {
            // The enumeration of the metrics measured
            METRIC_ID_UNSPECIFIED = 0;
            // Number of NAVs calculated during the month
            NAVS_CALCULATED = 1;
            //  Count of the number of delays in the period caused by the provider
            NAVS_PROVIDER_DELAYED = 2;
            //  Count of the number of delays in the period not caused by the provider
            NAVS_NON_PROVIDER_DELAYED = 3;
            //  Percentage of total NAVs delivered within the agreed timescale during the reporting month.
            //  NAV_TIMELINESS should equal  1- (NAVS_PROVIDER_DELAYED + NAVS_NON_PROVIDER_DELAYED) / NAVS_CALCULATED
            //  in a period
            NAV_TIMELINESS = 4;
            //  Percentage of total NAVs delivered within the agreed timescale during the reporting month,
            //  excluding non-provider caused delays.
            //  NAVS_TIMELINESS_PROVIDER should equal 1 - (NAVS_PROVIDER_DELAYED / NAVS_CALCULATED)
            NAV_TIMELINESS_PROVIDER = 5;
            // Percentage of valuations produced during the reporting month where no error(s) has been identified.
            NAV_ACCURACY = 6;
            // Percentage of valuations produced during the reporting month where no error(s) has been identified.
            // This percentage is not impacted by errors where the root cause was identified as not the delegate.
            NAV_ACCURACY_PROVIDER = 7;
            // The count of material nav errors where the delegate was responsible
            NAV_ERRORS_MATERIAL_PROVIDER = 8;
            // The count of material nav errors where the delegate was not responsible
            NAV_ERRORS_MATERIAL_NON_PROVIDER = 9;
            // The count of material nav errors where the delegate was responsible
            NAV_ERRORS_NON_MATERIAL_PROVIDER = 10;
            // The count of material nav errors where the delegate was not responsible
            NAV_ERRORS_NON_MATERIAL_NON_PROVIDER = 11;
            // The number of securities for which there has not been a price movement for an agreed number of consecutive business days.
            STALE_SECURITIES = 12;
            // Total number of
            // Number of cash reconciliations reported between 31 to 60 days
            CASH_RECONCILIATIONS_31_TO_60_DAYS = 13;
            // Number of cash reconciliations reported greater than or equal to 61 days
            CASH_RECONCILIATIONS_GREATER_THAN_60_DAYS = 14;
            // Number of stock reconciliations reported between 31 to 60 days
            STOCK_RECONCILIATIONS_31_TO_60_DAYS = 15;
            // Number of stock reconciliations reported greater than or equal to 61 days
            STOCK_RECONCILIATIONS_GREATER_THAN_60_DAYS = 16;
            // The count of system issues that occurred during the period
            COUNT_SYSTEM_ISSUES = 17;
            // The number of late financial reports
            NUMBER_LATE_FINANCIAL_REPORTS = 18;
            // The net asset value at the end of the period in reporting currency
            NET_ASSET_VALUE_REPORTING_CURRENCY = 19;
            // The net asset value at the end of the period in subject currency
            NET_ASSET_VALUE_SUBJECT_CURRENCY = 20;
            // A security is considered difficult to price when (a) the security is fair-valued, (b) there is a single broker price, (d) stale or unchanged price, (d) it is suspended or delisted, (e) distressed fixed income, (f) defaulted fixed income as of the reporting date
            DIFFICULT_TO_PRICE_SECURITIES = 21;
            // Number of securities where trading has been stopped as of the reporting date
            SUSPENDED_OR_DELISTED_SECURITIES = 22;
            // Number of fixed income securities where the company or government entity is experiencing financial or operational distress, but has not defaulted as of the reporting date
            DISTRESSED_FIXED_INCOME_SECURITIES = 23;
            // Number of fixed income securities where the company or government entity has defaulted as of the reporting date
            DEFAULTED_FIXED_INCOME_SECURITIES = 24;
            // The number of securities held across portfolios
            SECURITIES_HELD = 25;
            // The annualized TER for the reporting period
            ANNUALIZED_TER = 26;
            // The annualized TER, year-to-date, as of the end of the reporting period
            ANNUALIZED_YTD_TER = 27;
        }
        // The identifier of what the metric measures
        MetricID metric_id = 8;
        // The type of the metric
        enum MetricType {
            METRIC_TYPE_UNSPECIFIED = 0;
            COUNT = 1;
            PERCENTAGE = 2;
            MONEY = 3;
        }
        // Enumeration for how to interpret the metric value
        MetricType metric_type = 9;
        // If the metric type is "MONEY" then a 3-letter currency code defined in ISO 4217 must be provided.
        string currency_code = 10;
        // The value of the metric
        double metric = 11;
        // The "RED/AMBER/GREEN" designation if applicable
        RedAmberGreen rag = 12;
        // The amber cutoff (i.e. the value above which the metric is no longer classified as "RED") if applicable
        double amber_cutoff = 13;
        // The green cutoff (i.e. the value above which the metric is no longer classified as "AMBER")  if applicable
        double green_cutoff = 14;
        // Optional. The name of the provider
        string provider = 15;
        // Optional. The metric ID used by the provider
        string provider_metric_id = 16;
        // Optional. The KPI name used by the provider
        string provider_metric_name = 17;
        // Optional. Any comments attached to the metric
        string comments = 99;
    }
    // KPIs & other key quantitative metrics
    repeated MonthlyRAGMetric metrics = 20;
    // The Assets Under Management Definition
    message NetAssetValueSnapshot {
        // The date for which the nav snapshot is provided
        google.type.Date effective_date = 1;
        // The common identifier of the subject.
        // In most instances the subject (i.e the entity being measured by the snapshot) should be the umbrella for which the report is provided.
        // Metrics related to specific sub-funds, however, can be reported alongside the aggregated values
        // so long as the this is consistently applied
        string subject_id = 2;
        // The human readable name of the subject of the snapshot
        string subject_name = 3;
        // The 3-letter currency code (defined in ISO 4217) of the base currency
        string base_currency = 11;
        // The assets under management as of the effective date in the base currency of the fund
        double aum_base_currency = 12;
        // The 3-letter currency code (defined in ISO 4217) of the reporting currency
        string reporting_currency = 13;
        // The assets under management as of the effective date in the reporting currency
        double aum_reporting_currency = 14;
    }
    // Time series of historic net asset value data
    repeated NetAssetValueSnapshot net_asset_values = 51;
    // Definition of a NAV calculation error
    message NAVCalculationErrorInformation {
        // The date of the error
        google.type.Date effective_date = 1;
        // The date the error was identified
        google.type.Date identification_date = 2;
        // The date the error was resolved
        google.type.Date resolution_date = 3;
        // Magnitude of the error in decimal (IncorrectNav / CorrectNav -1)
        double magnitude = 4;
        // Cause of the error
        string cause = 6;
        // Remediation
        string remediation = 7;
        // Other Comments
        string comments = 8;
    }
    // Last 13 months of NAV Calculation Errors
    repeated NAVCalculationErrorInformation nav_calculation_errors = 52;
    // Definition of a pricing error occurred in the pricing of a share class
    message SecurityPricingError {
        // The date of the error
        google.type.Date effective_date = 1;
        // The date the error was identified
        google.type.Date identification_date = 2;
        // The date the error was resolved
        google.type.Date resolution_date = 3;
        // Enumerations of financial identifiers
        enum FinancialInstrumentIdentifier {
            // Source not specified by the user.
            IDENTIFIER_UNSPECIFIED = 0;
            // ISO 6166 code of ISIN when available
            ISIN = 1;
            // CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
            CUSIP = 2;
            // SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
            SEDOL = 3;
            // WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
            WKN = 4;
            // Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
            BBG_TICKER = 5;
            // BBGID (The Bloomberg Global ID)
            BBGID = 6;
            // Reuters RIC (Reuters instrument code)
            RIC = 7;
            // FIGI (Financial_Instrument Global Identifier)
            FIGI = 8;
            // LEI 0 Legal Entity Identifier
            LEI = 9;
            // PermID - Refinitiv Permanent Identifiers
            PERM_ID = 10;
        }
        // Codification chosen to identify the financial instrument
        FinancialInstrumentIdentifier financial_identifier = 4;
        // Identifier of the affected instrument
        string instrument = 5;
        // Magnitude of the error in decimal (position / nav -1)
        double materiality = 6;
        // Cause of the error
        string cause = 7;
        // Remediation
        string remediation = 8;
        // Comments
        string comments = 9;
    }
    // Recent instrument pricing errors. Convention is to provide 13 months of history.
    repeated SecurityPricingError security_pricing_errors = 53;
    // Definition of a stale security
    message StaleSecurity {
        // The date of the stale security report
        google.type.Date reporting_date = 1;
        // The internal identifier of the umbrella
        string umbrella_fund_identifier = 2;
        // The name of the umbrella
        // Should conform to: https://openfunds.org/OFST005010 (Umbrella)
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string umbrella_fund = 3;
        // The identifier used to ID the sub-fun applicable)
        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
        // Refers to the Sub-Fund in the case of an umbrella structure
        // or Fund in the case of a standalone structure
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string fund_identifier = 4;
        // Names of the relevant sub-fund (if applicable)
        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
        // Refers to the Sub-Fund in the case of an umbrella structure
        // or Fund in the case of a standalone structure
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string fund = 5;
        // The identifier used by the producer to track the case internally
        string case_identifier = 6;
        // The human readable name of the security
        string security_name = 50;
        // The ISO 6166 code of ISIN when available
        string isin = 52;
        // CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
        string cusip = 53;
        // SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
        string sedol = 54;
        // Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
        string bbg_ticker = 55;
        // Reuters RIC (Reuters instrument code)
        string ric = 56;
        // FIGI (Financial_Instrument Global Identifier)
        string figi = 57;
        // PermID - Refinitiv Permanent Identifiers
        string perm_id = 58;
        // WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
        string wkn = 59;
        // LEI (Legal Entity Identifier)
        string lei = 60;
        // The identifier used by the producer internally
        string producer_identifier = 61;
        // If 'producer_identifier', describe the identifier provided
        string producer_identifier_description = 62;
        // Enumeration of asset class
        enum AssetClass {
            // Asset class not specified
            ASSET_CLASS_UNSPECIFIED = 0;
            // Commodities
            COMMODITY = 1;
            // Corporate Bonds
            CORPORATE = 2;
            // Currency
            CURRENCY = 3;
            // Equity
            EQUITY = 4;
            // Market index
            INDEX = 5;
            // Money Market
            MONEY_MARKET = 6;
            // Government Bonds
            GOVERNMENT = 7;
            // Mortgage Backed
            MTGE = 8;
            // Municipal Bonds
            MUNI = 9;
            // Total return swap on a basket
            TOTAL_RETURN_SWAP = 10;
        }
        // The asset class of the security
        AssetClass asset_class = 7;
        // The date the stale price was raised
        google.type.Date raised_date = 21;
        // The date the security was last priced
        google.type.Date price_latest_date = 22;
        // The number of days staled
        int32 days_staled = 9;
        // The pricing currency (3-letter currency code (defined in ISO 4217))
        string pricing_currency = 10;
        // The staled price (i.e. the last price) in the "pricing currency"
        double price_latest = 11;
        // The quantity of securities held in the security
        double quantity = 12;
        // The total value of the position in the security (price_latest * quantity)
        double position_value = 13;
        // The fund currency (3-letter currency code (defined in ISO 4217))
        string fund_currency = 14;
        // The position value in the fund currency (using report date FX)
        double position_value_fund_currency = 15;
        // The NAV of the fund in the fund currency
        double fund_nav = 16;
        // Magnitude of the error in decimal (position_value_fund_currency / nav -1)
        double materiality = 17;
        // The primary source of price information
        string primary_price_source = 18;
        // The secondary source of price information
        string secondary_price_source = 19;
        // The reasoning given for the stale price
        string reasoning = 20;
        // Additional comments
        string comments = 30;
    }
    // Stale prices as of the end of the reporting month
    repeated StaleSecurity stale_securities = 54;
    // Definition of a break that occurred in agreement on the non-cash holdings of a sub-fund
    message StockBreak {
        // The date of the stale security report
        google.type.Date report_date = 1;
        // The date the stock break was identified
        google.type.Date identification_date = 2;
        // The date the stock break was resolved
        google.type.Date resolution_date = 3;
        // The internal identifier of the umbrella
        string umbrella_fund_identifier = 4;
        // The name of the umbrella
        // Should conform to: https://openfunds.org/OFST005010 (Umbrella)
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string umbrella_fund = 5;
        // The identifier used to ID the sub-fun applicable)
        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
        // Refers to the Sub-Fund in the case of an umbrella structure
        // or Fund in the case of a standalone structure
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string fund_identifier = 6;
        // Names of the relevant sub-fund (if applicable)
        // Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
        // Refers to the Sub-Fund in the case of an umbrella structure
        // or Fund in the case of a standalone structure
        // See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
        string fund = 7;
        // The identifier used by the producer to track the case internally
        string case_identifier = 8;
        // The human readable name of the security
        string security_name = 50;
        // The ISO 6166 code of ISIN when available
        string isin = 52;
        // CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
        string cusip = 53;
        // SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
        string sedol = 54;
        // Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
        string bbg_ticker = 55;
        // Reuters RIC (Reuters instrument code)
        string ric = 56;
        // FIGI (Financial_Instrument Global Identifier)
        string figi = 57;
        // PermID - Refinitiv Permanent Identifiers
        string perm_id = 58;
        // WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
        string wkn = 59;
        // LEI (Legal Entity Identifier)
        string lei = 60;
        // The identifier used by the producer internally
        string producer_identifier = 61;
        // If 'producer_identifier', describe the identifier provided
        string producer_identifier_description = 62;
        // Enumeration of asset class
        enum AssetClass {
            // Asset class not specified
            ASSET_CLASS_UNSPECIFIED = 0;
            // Commodities
            COMMODITY = 1;
            // Corporate Bonds
            CORPORATE = 2;
            // Currency
            CURRENCY = 3;
            // Equity
            EQUITY = 4;
            // Market index
            INDEX = 5;
            // Money Market
            MONEY_MARKET = 6;
            // Government Bonds
            GOVERNMENT = 7;
            // Mortgage Backed
            MTGE = 8;
            // Municipal Bonds
            MUNI = 9;
            // Total return swap on a basket
            TOTAL_RETURN_SWAP = 10;
        }
        // The asset class of the security
        AssetClass asset_class = 9;
        // The date of the stock break
        google.type.Date effective_date = 10;
        // Magnitude of the error in decimal (position / nav -1)
        double materiality = 11;
        // Cause of the break
        string cause = 12;
        // Remediation
        string remediation = 13;
        // Comments
        string comment = 14;
    }
    // Recent Stock Breaks greater than 5 days. Convention is to provide 13 months of history.
    repeated StockBreak stock_breaks = 55;
    // Definition of break that has occurred in agreement on the cash holdings of a sub-fund
    message CashBreak {
        // The date of the stock break
        google.type.Date effective_date = 1;
        // The date the stock break was identified
        google.type.Date identification_date = 2;
        // The date the stock break was resolved
        google.type.Date resolution_date = 3;
        // Magnitude of the error in decimal (position / nav -1)
        double materiality = 4;
        // Cause of the break
        string cause = 5;
        // Remediation
        string remediation = 6;
        // Comments
        string comment = 7;
    }
    // Recent Cash Breaks greater than 5 days. Convention is to provide 13 months of history.
    repeated CashBreak cash_breaks = 56;
    // Definition of a Total Expense Ratio
    message TotalExpenseRatio {
        // The date of the TER (should be the last day of the relevant month)
        google.type.Date effective_date = 1;
        // The global identifier of the share class
        string share_class_id = 3;
        // Enumerations of financial identifiers
        enum ShareClassIdentifierTypes {
            // Source not specified by the user.
            IDENTIFIER_UNSPECIFIED = 0;
            // ISO 6166 code of ISIN when available
            ISIN = 1;
            // CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)
            CUSIP = 2;
            // SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)
            SEDOL = 3;
            // WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)
            WKN = 4;
            // Bloomberg Ticker (Bloomberg letters code that identify a company's securities)
            BBG_TICKER = 5;
            // BBGID (The Bloomberg Global ID)
            BBGID = 6;
            // Reuters RIC (Reuters instrument code)
            RIC = 7;
            // FIGI (Financial_Instrument Global Identifier)
            FIGI = 8;
            // LEI 0 Legal Entity Identifier
            LEI = 9;
            // PermID - Refinitiv Permanent Identifiers
            PERM_ID = 10;
        }
        // Codification chosen to identify the share class
        ShareClassIdentifierTypes share_class_id_type = 4;
        // Extension that identifies the share class.
        // Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
        string share_class_extension = 5;
        // The expense ratio over the current calendar month
        double ter_current_month = 6;
        // The monthly expense ratio annualized
        double ter_current_month_annualized = 7;
        // The expense ratio YTD
        double ter_ytd = 8;
        // The YTD expense ratio annualized
        double ter_ytd_annualized = 9;
        // Comments on the expense ratio
        string comments = 10;
    }
    // The timeseries of TERs per share class. Convention is to provide 13 months of history.
    repeated TotalExpenseRatio total_expense_ratios = 57;
    // Definition of an invoice
    message Invoice {
        // The invoice date
        google.type.Date invoice_date = 1;
        // The date of authorisation
        google.type.Date authorisation_date = 2;
        // The date of payment
        google.type.Date payment_date = 3;
        // The invoice number or identifier
        string invoice_identifier = 4;
        // The Recipient of the invoice
        string recipient = 5;
        // The type of fee
        string fee_type = 6;
        // The invoiced amount
        double invoiced_amount = 7;
        // The invoiced amount specific to the fund in question
        double fund_specific_amount = 8;
    }
    // Recent invoices paid. Convention is to provide 6 months of history.
    repeated Invoice recent_invoices = 58;
    // Definition of a Swing Pricing Events.
    message SwingPricingEvent {
        // The effective date on which swing pricing was applied
        google.type.Date effective_date = 1;
        // The threshold that was used to evaluate whether swing pricing should be applied
        double swing_threshold = 2;
        // The adjustment factor applied to the nav to account for the anticipated effective of subscriptions or redemptions
        double swing_factor = 3;
        // The NAV before the swing factor had been applied
        double nav_without_swing_factor = 4;
        // The NAV after the swing factor had been applied
        double nav_with_swing_factor = 5;
    }
    // The list of Swing Pricing events within the fund. Convention is to provide 12 months history. Swing pricing is a method used by collective investment schemes to adjust the net asset value (NAV) of the fund in order to protect existing shareholders from the negative impact of large purchases or redemptions by new or existing shareholders. This is done by adjusting the NAV of the fund to reflect the anticipated costs associated with buying or selling the underlying assets of the fund. The adjustment is typically made by charging or crediting a "swing factor" to the NAV of the fund, which is based on the size of the purchase or redemption relative to the fund's assets under management (AUM). The goal of swing pricing is to ensure that the costs of buying and selling assets are borne by those who cause the costs, rather than by all shareholders of the fund.
    repeated SwingPricingEvent swing_pricing_events = 59;
    // Definition of NAV information shared per share class at a point in time.
    message PerShareClassNAV {
        // The effective date
        google.type.Date effective_date = 1;
        // Enumerations of financial identifiers
        enum FinancialInstrumentIdentifier {
            // Source not specified by the user.
            IDENTIFIER_UNSPECIFIED = 0;
            // FIGI (Financial Instrument Global Identifier). To look up the FIGI navigate to https://www.openfigi.com/.
            FIGI = 1;
            // PermID (Refinitiv Permanent Identifier). To look up the PermID navigate to https://permid.org/
            PERM_ID = 2;
        }
        // Codification chosen to identify the financial instrument
        FinancialInstrumentIdentifier financial_identifier = 2;
        // The global identifier of the share class
        string share_class_id = 3;
        // Extension that identifies the share class.
        // Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
        string share_class_extension = 4;
        // The number of issued units of the share class
        double units = 5;
        // The nav per unit in the base currency at at the effective_date
        double nav_per_unit_base_currency = 6;
        // The current total nav of the share class in the base currency
        double total_nav_base_currency = 7;
        // The nav per unit in the reporting currency at at the effective_date
        double nav_per_unit_reporting_currency = 8;
        // The current total nav of the share class in the reporting currency
        double total_nav_reporting_currency = 9;
    }
    // The time series of share class specific nav information
    // Convention is to provide 12 months of monthly data.
    repeated PerShareClassNAV per_share_class_nav_historical = 60;
}

// Batch set of RT000FTL8 responses
message RT000FTL8_batch {
    repeated RT000FTL8 response = 1;
}

